plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id("dev.architectury.loom")
    id("architectury-plugin")
    id("org.jetbrains.kotlin.jvm")
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

archivesBaseName = rootProject.archives_base_name + "-neoforge"

loom {
    silentMojangMappingsLicense()
    enableTransitiveAccessWideners = true
    //accessWidenerPath = project(":common").loom.accessWidenerPath
//
    //forge {
    //    convertAccessWideners = true
    //    extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    //}
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {

    minecraft("com.mojang:minecraft:${rootProject.minecraft_version}")
    // The following line declares the mojmap mappings, you may use other mappings as well
    mappings(loom.officialMojangMappings())
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"

    modImplementation("com.cobblemon:neoforge:${property("cobblemon_version")}")

    forgeRuntimeLibrary("thedarkcolour:kotlinforforge-neoforge:5.3.0") {
        exclude group: "net.neoforged.fancymodloader", module: "loader"
    }

    forgeRuntimeLibrary("org.apache.httpcomponents:httpclient:4.5.13")
    forgeRuntimeLibrary("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.9.0")
    shadowBundle("org.apache.httpcomponents:httpclient:4.5.13")
    shadowBundle("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.9.0")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

processResources {
    inputs.property "version", project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"
    exclude "com/**/*"
    exclude "com.*"
    exclude "kotlin.*"
    exclude "kotlin/**/*"
    exclude "kotlinx.*"
    exclude "kotlinx/**/*"

    relocate("org.apache.http", "dev.chasem.apache.http")
    relocate("org.apache.commons", "dev.chasem.apache.commons")

    configurations = [project.configurations.shadowBundle]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}